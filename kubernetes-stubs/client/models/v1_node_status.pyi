# Code generated by `stubgen`. DO NOT EDIT.
from kubernetes.client.configuration import Configuration as Configuration
from typing import Any

class V1NodeStatus:
    openapi_types: Any
    attribute_map: Any
    local_vars_configuration: Any
    discriminator: Any
    def __init__(self, addresses: Any | None = ..., allocatable: Any | None = ..., capacity: Any | None = ..., conditions: Any | None = ..., config: Any | None = ..., daemon_endpoints: Any | None = ..., images: Any | None = ..., node_info: Any | None = ..., phase: Any | None = ..., volumes_attached: Any | None = ..., volumes_in_use: Any | None = ..., local_vars_configuration: Any | None = ...) -> None: ...
    @property
    def addresses(self): ...
    @addresses.setter
    def addresses(self, addresses) -> None: ...
    @property
    def allocatable(self): ...
    @allocatable.setter
    def allocatable(self, allocatable) -> None: ...
    @property
    def capacity(self): ...
    @capacity.setter
    def capacity(self, capacity) -> None: ...
    @property
    def conditions(self): ...
    @conditions.setter
    def conditions(self, conditions) -> None: ...
    @property
    def config(self): ...
    @config.setter
    def config(self, config) -> None: ...
    @property
    def daemon_endpoints(self): ...
    @daemon_endpoints.setter
    def daemon_endpoints(self, daemon_endpoints) -> None: ...
    @property
    def images(self): ...
    @images.setter
    def images(self, images) -> None: ...
    @property
    def node_info(self): ...
    @node_info.setter
    def node_info(self, node_info) -> None: ...
    @property
    def phase(self): ...
    @phase.setter
    def phase(self, phase) -> None: ...
    @property
    def volumes_attached(self): ...
    @volumes_attached.setter
    def volumes_attached(self, volumes_attached) -> None: ...
    @property
    def volumes_in_use(self): ...
    @volumes_in_use.setter
    def volumes_in_use(self, volumes_in_use) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
