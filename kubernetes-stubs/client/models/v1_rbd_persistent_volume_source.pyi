from kubernetes.client.configuration import Configuration as Configuration
from typing import Any, Optional

class V1RBDPersistentVolumeSource:
    openapi_types: Any = ...
    attribute_map: Any = ...
    local_vars_configuration: Any = ...
    discriminator: Any = ...
    def __init__(self, fs_type: Optional[Any] = ..., image: Optional[Any] = ..., keyring: Optional[Any] = ..., monitors: Optional[Any] = ..., pool: Optional[Any] = ..., read_only: Optional[Any] = ..., secret_ref: Optional[Any] = ..., user: Optional[Any] = ..., local_vars_configuration: Optional[Any] = ...) -> None: ...
    @property
    def fs_type(self): ...
    @fs_type.setter
    def fs_type(self, fs_type: Any) -> None: ...
    @property
    def image(self): ...
    @image.setter
    def image(self, image: Any) -> None: ...
    @property
    def keyring(self): ...
    @keyring.setter
    def keyring(self, keyring: Any) -> None: ...
    @property
    def monitors(self): ...
    @monitors.setter
    def monitors(self, monitors: Any) -> None: ...
    @property
    def pool(self): ...
    @pool.setter
    def pool(self, pool: Any) -> None: ...
    @property
    def read_only(self): ...
    @read_only.setter
    def read_only(self, read_only: Any) -> None: ...
    @property
    def secret_ref(self): ...
    @secret_ref.setter
    def secret_ref(self, secret_ref: Any) -> None: ...
    @property
    def user(self): ...
    @user.setter
    def user(self, user: Any) -> None: ...
    def to_dict(self): ...
    def to_str(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
